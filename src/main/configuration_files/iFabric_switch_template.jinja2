/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_iFabric = 0x1212;
const bit<16> TYPE_iFabric_flood = 0x1213;
const bit<32> MAX_iFabric_ID = 1 << 15;
const bit<16> iFabric_next_protocol_TYPE_ETHERNET = 0x0001;


/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

header iFabric_t {
    bit<16> header_type;
    bit<16> header_subtype;
    bit<16> next_protocol;
    bit<16> flow_id;
    bit<16> source_id;
    bit<16> destination_id;
    bit<128> reserved;
}

{% for protocol in protocols.values() -%}
{{protocol}}  
{% endfor %}

struct metadata {
    bit<16>    priority;
}

struct headers {
    iFabric_t   iFabric;
    {% for protocol in protocols.keys() -%}
    {{protocol}}_t  {{protocol}};  
    {% endfor %}
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition select(packet.lookahead<iFabric_t>().header_type) {
            TYPE_iFabric              : parse_iFabric;
            default                    : parse_Ethernet;
        }     
    }


    state parse_iFabric {
        packet.extract(hdr.iFabric);
        transition select(hdr.iFabric.next_protocol) {
            iFabric_next_protocol_TYPE_ETHERNET: parse_Ethernet;
            default: accept;
        }
    }

    {% for protocol_name, protocol_data in next_protocols_fields.items() -%}
    state parse_{{protocol_name}} {
        packet.extract(hdr.{{protocol_name}});
        {% if protocol_data.get("next_protocol_field") %}
        transition select(hdr.{{protocol_name}}.{{protocol_data["next_protocol_field"]}}) {
            {% for next_protocol, field_value in protocol_data["next_protocol_value"].items() -%}
            {{field_value}}: parse_{{next_protocol}};
            {% endfor %}
            default: accept;
        }{% endif %}{% if not protocol_data.get("next_protocol_field")%}transition accept;{% endif %}
    }
    {% endfor %}

}

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {   
    apply {  }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    counter((MAX_iFabric_ID), CounterType.bytes) ingress_byte_cnt;
    
    action drop() {
        mark_to_drop(standard_metadata);
    }
    
    action append_iFabric_header(
                bit<16> flow_id,
                bit<16> node_id,
                bit<16> group_id) {
        meta.priority = 0;
        hdr.iFabric.setValid();
        hdr.iFabric.header_type = TYPE_iFabric;
        hdr.iFabric.next_protocol = iFabric_next_protocol_TYPE_ETHERNET;
        hdr.iFabric.flow_id = flow_id;
        hdr.iFabric.node_id = node_id;
        hdr.iFabric.group_id = group_id;
    }

    action punt_to_cpu() {
        hdr.iFabric.setInvalid();
    }

    table CPU_punter {
        key = {
            {% for match_field_name in match_fields_to_learn -%}
            {{match_field_name}}: range;
            {% endfor %}
        }
        actions = {
            punt_to_cpu;
            NoAction;
            drop;
        }
        size = 1024;
        default_action = punt_to_cpu();
    }


    table Flow_classifier {
        key = {
            {% for match_field_name in match_fields_used -%}
            {{match_field_name}}: range;
            {% endfor %}
        }
        actions = {
            append_iFabric_header;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = NoAction();
    }
    

    apply {
        if (!hdr.iFabric.isValid()){
            CPU_punter.apply();
            Flow_classifier.apply();
        }  
        else if (hdr.iFabric.header_subtype == 1){
            punt_to_cpu();
        }

        ingress_byte_cnt.count((bit<32>) ((bit<16>)standard_metadata.ingress_port + (hdr.iFabric.flow_id - 1)* 48));
        standard_metadata.mcast_grp = (bit<16>)hdr.iFabric.flow_id;
        }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {

    counter((MAX_iFabric_ID), CounterType.bytes) egress_byte_cnt;

    action strip_header(){
        hdr.iFabric.setInvalid();
    }
    
    table Port_checker {
        key = {
            standard_metadata.egress_port: range;
        }
        actions = {
            strip_header;
            NoAction;
        }
        size = 1024;
        default_action = NoAction();
    }

    apply {
        egress_byte_cnt.count((bit<32>) ((bit<16>)standard_metadata.egress_port + (hdr.iFabric.flow_id - 1)* 48));
        port_checker.apply();       
    }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers  hdr, inout metadata meta) {
     apply {
	}
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.iFabric);
        {% for protocol in protocols.keys() -%}
            packet.emit(hdr.{{protocol}});
        {% endfor %}
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
